# -*- coding: utf-8 -*-
"""
/***************************************************************************
 sartracker
                                 A QGIS plugin
 SAR Tracking Console for QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-09-21
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Donal O' Callaghan
        email                : ocallaghandonal2@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QTimer
from qgis.PyQt.QtGui import QIcon, QFont
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QLabel, QDialog, QVBoxLayout, QHBoxLayout, QPushButton
from qgis.core import (
    QgsCoordinateReferenceSystem, QgsCoordinateTransform,
    QgsProject, QgsPointXY, QgsRectangle
)

# Initialize Qt resources from file resources.py
from .resources import *
import os.path
import traceback

# Import Qt5/Qt6 compatible constants
from .utils.qt_compat import RightDockWidgetArea

# Import our SAR tracking components
try:
    from .providers.csv import FileCSVProvider
    from .controllers.layers_controller import LayersController
    from .ui.sar_panel import SARPanel
    from .maptools.marker_tool import MarkerMapTool
    from .maptools.measure_tool import MeasureTool
    from .ui.marker_dialog import MarkerDialog
    from .ui.coordinate_converter_dialog import CoordinateConverterDialog
except Exception as e:
    print(f"ERROR importing SAR tracking components: {e}")
    print(traceback.format_exc())


class sartracker:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        try:
            locale_value = QSettings().value('locale/userLocale')
            if locale_value and str(locale_value):
                locale = str(locale_value)[0:2]
            else:
                locale = 'en'
        except Exception:
            locale = 'en'  # Fallback to English if locale detection fails
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'sartracker_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&sartracker')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Initialize SAR tracking components
        self.layers_controller = None
        self.provider = None
        self.sar_panel = None
        self.marker_tool = None
        self.measure_tool = None
        self.line_tool = None
        self.range_ring_tool = None
        self.tool_registry = None
        self.current_marker_type = None  # 'poi' or 'casualty'
        self.coords_label = None  # Status bar coordinate display
        self.last_coords_point = None  # Last mouse position (for throttling)
        self.coords_update_timer = None  # Timer to throttle coordinate updates

        # Coordinate systems
        self.wgs84 = QgsCoordinateReferenceSystem("EPSG:4326")
        self.itm = QgsCoordinateReferenceSystem("EPSG:29903")  # Irish Grid

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('sartracker', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # Use absolute path to icon file
        icon_path = os.path.join(self.plugin_dir, 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'SAR Tracker Panel'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        # Initialize layers controller
        self.layers_controller = LayersController(self.iface)

        # Initialize marker map tool
        self.marker_tool = MarkerMapTool(self.iface.mapCanvas())
        self.marker_tool.marker_clicked.connect(self._on_marker_clicked)

        # Initialize measure tool
        self.measure_tool = MeasureTool(self.iface.mapCanvas())
        self.measure_tool.measurement_complete.connect(self._on_measurement_complete)

        # Initialize Line Tool
        from .maptools import LineTool
        self.line_tool = LineTool(self.iface.mapCanvas(), self.layers_controller)
        self.line_tool.drawing_complete.connect(self._on_line_complete)
        self.line_tool.drawing_cancelled.connect(self._on_drawing_cancelled)

        # Initialize Range Ring Tool
        from .maptools import RangeRingTool
        self.range_ring_tool = RangeRingTool(self.iface.mapCanvas(), self.layers_controller)
        self.range_ring_tool.drawing_complete.connect(self._on_range_rings_complete)
        self.range_ring_tool.drawing_cancelled.connect(self._on_drawing_cancelled)

        # Initialize Tool Registry
        from .maptools import ToolRegistry
        self.tool_registry = ToolRegistry(self.iface.mapCanvas())
        self.tool_registry.register_tool('line', self.line_tool)
        self.tool_registry.register_tool('range_rings', self.range_ring_tool)
        self.tool_registry.tool_activated.connect(self._on_tool_activated)
        self.tool_registry.tool_deactivated.connect(self._on_tool_deactivated)

        # Initialize SAR Panel
        self.sar_panel = SARPanel(self.iface.mainWindow())
        self.iface.addDockWidget(RightDockWidgetArea, self.sar_panel)
        self.sar_panel.hide()  # Hidden by default

        # Connect SAR Panel signals
        self.sar_panel.mission_started.connect(self._on_mission_started)
        self.sar_panel.mission_paused.connect(self._on_mission_paused)
        self.sar_panel.mission_resumed.connect(self._on_mission_resumed)
        self.sar_panel.mission_finished.connect(self._on_mission_finished)
        self.sar_panel.refresh_requested.connect(self._on_refresh_data)
        self.sar_panel.csv_load_requested.connect(self._on_load_csv)
        self.sar_panel.add_poi_requested.connect(self._on_add_poi_requested)
        self.sar_panel.add_casualty_requested.connect(self._on_add_casualty_requested)
        self.sar_panel.add_hazard_requested.connect(self._on_add_hazard_requested)
        self.sar_panel.line_tool_requested.connect(self._on_line_tool_requested)
        self.sar_panel.range_rings_tool_requested.connect(self._on_range_rings_tool_requested)
        self.sar_panel.coordinate_converter_requested.connect(self._on_coordinate_converter_requested)
        self.sar_panel.measure_distance_requested.connect(self._on_measure_distance_requested)
        self.sar_panel.autosave_requested.connect(self._on_autosave_requested)

        # Add coordinate display to status bar
        self.coords_label = QLabel()
        self.coords_label.setMinimumWidth(550)
        self.coords_label.setMaximumWidth(550)  # Fixed width prevents jitter

        # Use monospace font for stable width
        font = QFont("Courier New", 10)
        if not font.exactMatch():
            font = QFont("Monospace", 10)
        self.coords_label.setFont(font)

        self.coords_label.setStyleSheet("QLabel { padding: 2px 8px; background-color: #f0f0f0; }")
        self.iface.statusBarIface().addPermanentWidget(self.coords_label)

        # Set up timer to throttle coordinate updates (50ms = 20 updates/sec max)
        self.coords_update_timer = QTimer()
        self.coords_update_timer.timeout.connect(self._update_coords_display)
        self.coords_update_timer.start(50)

        # Connect to map canvas mouse movement (stores point, actual update happens on timer)
        self.iface.mapCanvas().xyCoordinates.connect(self._on_mouse_move)

        # Check for paused mission and prompt to resume
        QTimer.singleShot(1000, self._check_for_paused_mission)  # Delay 1s to let QGIS fully load


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        try:
            # Remove menu items and toolbar icons
            for action in self.actions:
                self.iface.removePluginMenu(
                    self.tr(u'&sartracker'),
                    action)
                self.iface.removeToolBarIcon(action)

            # Stop coordinate update timer
            if self.coords_update_timer:
                try:
                    self.coords_update_timer.stop()
                    self.coords_update_timer.deleteLater()
                except:
                    pass
                self.coords_update_timer = None

            # Remove coordinate label from status bar
            if self.coords_label:
                try:
                    self.iface.statusBarIface().removeWidget(self.coords_label)
                    self.coords_label.deleteLater()
                except:
                    pass
                self.coords_label = None

            # Deactivate and clean up all map tools
            if self.tool_registry:
                try:
                    self.tool_registry.deactivate_current()
                except:
                    pass

            # Clean up individual tools
            for tool_attr in ['marker_tool', 'measure_tool', 'line_tool', 'range_ring_tool']:
                tool = getattr(self, tool_attr, None)
                if tool:
                    try:
                        # Deactivate if it's the current tool
                        if self.iface.mapCanvas().mapTool() == tool:
                            self.iface.mapCanvas().unsetMapTool(tool)
                        # Call deactivate method if exists
                        if hasattr(tool, 'deactivate'):
                            tool.deactivate()
                        # Delete the tool
                        tool.deleteLater()
                    except:
                        pass
                    setattr(self, tool_attr, None)

            # Clean up tool registry
            if self.tool_registry:
                try:
                    self.tool_registry.deleteLater()
                except:
                    pass
                self.tool_registry = None

            # Disconnect and clean up SAR Panel
            if self.sar_panel:
                try:
                    # Disconnect all signals
                    self.sar_panel.mission_started.disconnect()
                    self.sar_panel.mission_paused.disconnect()
                    self.sar_panel.mission_resumed.disconnect()
                    self.sar_panel.mission_finished.disconnect()
                    self.sar_panel.refresh_requested.disconnect()
                    self.sar_panel.csv_load_requested.disconnect()
                    self.sar_panel.add_poi_requested.disconnect()
                    self.sar_panel.add_casualty_requested.disconnect()
                    self.sar_panel.add_hazard_requested.disconnect()
                    self.sar_panel.line_tool_requested.disconnect()
                    self.sar_panel.range_rings_tool_requested.disconnect()
                    self.sar_panel.coordinate_converter_requested.disconnect()
                    self.sar_panel.measure_distance_requested.disconnect()
                    self.sar_panel.autosave_requested.disconnect()
                except:
                    pass  # Signals may not be connected

                try:
                    # Remove from dock widget area
                    self.iface.removeDockWidget(self.sar_panel)
                    # Delete the panel
                    self.sar_panel.deleteLater()
                except:
                    pass
                self.sar_panel = None

            # Clean up layers controller
            if self.layers_controller:
                try:
                    self.layers_controller = None
                except:
                    pass

            # Clean up provider
            if self.provider:
                try:
                    self.provider = None
                except:
                    pass

        except Exception as e:
            print(f"Error during plugin unload: {e}")
            import traceback
            traceback.print_exc()


    def run(self):
        """Toggle SAR Tracker panel visibility"""
        if self.sar_panel.isVisible():
            self.sar_panel.hide()
        else:
            self.sar_panel.show()

    def _on_mission_started(self, mission_name):
        """Handle mission start."""
        print(f"Mission started: {mission_name}")
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            f"Mission '{mission_name}' started",
            level=3,  # Success
            duration=3
        )

    def _on_mission_paused(self):
        """Handle mission pause."""
        print("Mission paused")
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Mission paused",
            level=1,  # Warning
            duration=2
        )

    def _on_mission_resumed(self):
        """Handle mission resume."""
        print("Mission resumed")
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Mission resumed",
            level=3,  # Success
            duration=2
        )

    def _on_mission_finished(self):
        """Handle mission finish."""
        print("Mission finished")
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Mission finished",
            level=3,  # Success
            duration=3
        )

    def _on_refresh_data(self):
        """Handle data refresh request."""
        if not self.provider:
            self.iface.messageBar().pushMessage(
                "SAR Tracker",
                "No data source loaded. Please load a CSV file first.",
                level=1,  # Warning
                duration=3
            )
            return

        try:
            # Get current positions
            current = self.provider.get_current()
            if current:
                self.layers_controller.update_current_positions(current)

            # Get breadcrumbs
            breadcrumbs = self.provider.get_breadcrumbs()
            if breadcrumbs:
                self.layers_controller.update_breadcrumbs(breadcrumbs)

            # Update device list in panel
            devices = self.provider.get_devices()
            self.sar_panel.update_devices(devices)

            self.iface.messageBar().pushMessage(
                "SAR Tracker",
                f"Refreshed: {len(current)} devices, {len(breadcrumbs)} points",
                level=3,  # Success
                duration=2
            )

        except Exception as e:
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Refresh Error",
                f"Error refreshing data:\n\n{str(e)}"
            )

    def _on_load_csv(self, csv_file):
        """Handle CSV load request from panel."""
        try:
            # Create CSV provider
            self.provider = FileCSVProvider(csv_file)

            # Test connection
            if not self.provider.test_connection():
                QMessageBox.warning(
                    self.iface.mainWindow(),
                    "CSV Load Error",
                    f"Could not read CSV file: {csv_file}"
                )
                return

            # Get tracking data
            self.iface.messageBar().pushMessage(
                "SAR Tracker",
                "Loading tracking data...",
                level=0,  # Info
                duration=2
            )

            # Get current positions
            current = self.provider.get_current()
            if current:
                self.layers_controller.update_current_positions(current)

            # Get breadcrumbs
            breadcrumbs = self.provider.get_breadcrumbs()
            if breadcrumbs:
                self.layers_controller.update_breadcrumbs(breadcrumbs)

            # Update device list in panel
            devices = self.provider.get_devices()
            self.sar_panel.update_devices(devices)

            # Update data source label
            import os
            if os.path.isdir(csv_file):
                folder_name = os.path.basename(csv_file)
                self.sar_panel.set_data_source(f"CSV Folder: {folder_name}")
            else:
                filename = os.path.basename(csv_file)
                self.sar_panel.set_data_source(f"CSV: {filename}")

            if not current and not breadcrumbs:
                QMessageBox.information(
                    self.iface.mainWindow(),
                    "No Data",
                    "CSV file contains no valid tracking data."
                )
            else:
                self.iface.messageBar().pushMessage(
                    "SAR Tracker",
                    f"Loaded {len(current)} device(s), {len(breadcrumbs)} points",
                    level=3,  # Success
                    duration=3
                )

        except Exception as e:
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Error Loading CSV",
                f"An error occurred while loading the CSV file:\n\n{str(e)}"
            )

    def _on_mouse_move(self, point):
        """
        Handle mouse movement over map canvas.
        Just store the point - actual display update happens on timer.

        Args:
            point: QgsPointXY in map canvas CRS
        """
        self.last_coords_point = point

    def _update_coords_display(self):
        """
        Update coordinate display in status bar.
        Called by timer to throttle updates.
        """
        if not self.last_coords_point:
            return

        try:
            # Get canvas CRS
            canvas_crs = self.iface.mapCanvas().mapSettings().destinationCrs()

            # Transform to WGS84
            transform_to_wgs84 = QgsCoordinateTransform(
                canvas_crs,
                self.wgs84,
                QgsProject.instance()
            )
            wgs84_point = transform_to_wgs84.transform(self.last_coords_point)

            # Transform to Irish Grid (ITM)
            transform_to_itm = QgsCoordinateTransform(
                canvas_crs,
                self.itm,
                QgsProject.instance()
            )
            itm_point = transform_to_itm.transform(self.last_coords_point)

            # Format display text with fixed-width formatting
            coords_text = (
                f"WGS84: {wgs84_point.y():9.6f}°N, {wgs84_point.x():10.6f}°E  |  "
                f"Irish Grid: E:{int(itm_point.x()):7d}  N:{int(itm_point.y()):7d}"
            )
            self.coords_label.setText(coords_text)

        except Exception as e:
            # Silently fail - don't spam user with coordinate errors
            pass

    def _on_add_poi_requested(self):
        """Handle Add IPP/LKP button click from SAR Panel."""
        # Deactivate any drawing tools first
        if self.tool_registry:
            self.tool_registry.deactivate_current()

        self.current_marker_type = 'ipp_lkp'
        self.iface.mapCanvas().setMapTool(self.marker_tool)
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Click on map to add IPP/LKP location",
            level=0,  # Info
            duration=3
        )

    def _on_add_casualty_requested(self):
        """Handle Add Clue button click from SAR Panel."""
        # Deactivate any drawing tools first
        if self.tool_registry:
            self.tool_registry.deactivate_current()

        self.current_marker_type = 'clue'
        self.iface.mapCanvas().setMapTool(self.marker_tool)
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Click on map to add Clue location",
            level=0,  # Info
            duration=3
        )

    def _on_add_hazard_requested(self):
        """Handle Add Hazard button click from SAR Panel."""
        # Deactivate any drawing tools first
        if self.tool_registry:
            self.tool_registry.deactivate_current()

        self.current_marker_type = 'hazard'
        self.iface.mapCanvas().setMapTool(self.marker_tool)
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Click on map to add Hazard location",
            level=0,  # Info
            duration=3
        )

    def _on_marker_clicked(self, lat, lon, easting, northing):
        """
        Handle map click from MarkerMapTool.

        Args:
            lat: Latitude (WGS84)
            lon: Longitude (WGS84)
            easting: Irish Grid Easting (ITM)
            northing: Irish Grid Northing (ITM)
        """
        # Show marker dialog
        dialog = MarkerDialog(lat, lon, easting, northing, self.iface.mainWindow())

        # Pre-select marker type based on which button was clicked
        if self.current_marker_type == 'clue':
            dialog.clue_radio.setChecked(True)
        elif self.current_marker_type == 'hazard':
            dialog.hazard_radio.setChecked(True)
        else:
            dialog.ipp_lkp_radio.setChecked(True)

        # Show dialog and wait for user
        result = dialog.exec_()

        if result == MarkerDialog.Accepted:
            # Get marker data from dialog
            marker_data = dialog.get_marker_data()

            try:
                # Add marker to map based on type
                if marker_data['type'] == 'ipp_lkp':
                    marker_id = self.layers_controller.add_ipp_lkp(
                        name=marker_data['name'],
                        lat=marker_data['lat'],
                        lon=marker_data['lon'],
                        subject_category=marker_data.get('subject_category', ''),
                        description=marker_data['description'],
                        irish_grid_e=marker_data['easting'],
                        irish_grid_n=marker_data['northing']
                    )
                    marker_type_str = "IPP/LKP"
                elif marker_data['type'] == 'clue':
                    marker_id = self.layers_controller.add_clue(
                        name=marker_data['name'],
                        lat=marker_data['lat'],
                        lon=marker_data['lon'],
                        clue_type=marker_data.get('clue_type', ''),
                        confidence=marker_data.get('confidence', 'Possible'),
                        description=marker_data['description'],
                        irish_grid_e=marker_data['easting'],
                        irish_grid_n=marker_data['northing']
                    )
                    marker_type_str = "Clue"
                else:  # hazard
                    marker_id = self.layers_controller.add_hazard(
                        name=marker_data['name'],
                        lat=marker_data['lat'],
                        lon=marker_data['lon'],
                        hazard_type=marker_data.get('hazard_type', ''),
                        severity="Medium",  # Default severity
                        description=marker_data['description'],
                        irish_grid_e=marker_data['easting'],
                        irish_grid_n=marker_data['northing']
                    )
                    marker_type_str = "Hazard"

                self.iface.messageBar().pushMessage(
                    "SAR Tracker",
                    f"{marker_type_str} '{marker_data['name']}' added successfully",
                    level=3,  # Success
                    duration=3
                )

            except Exception as e:
                QMessageBox.critical(
                    self.iface.mainWindow(),
                    "Error Adding Marker",
                    f"An error occurred while adding the marker:\n\n{str(e)}"
                )

        # Deactivate marker tool (return to pan/zoom)
        self.iface.mapCanvas().unsetMapTool(self.marker_tool)
        self.current_marker_type = None

    def _on_coordinate_converter_requested(self):
        """Handle Coordinate Converter button click."""
        dialog = CoordinateConverterDialog(self.iface.mainWindow())

        # Connect go_to_location signal
        dialog.go_to_location.connect(self._zoom_to_location)

        dialog.exec_()

    def _zoom_to_location(self, lat, lon):
        """
        Zoom map to specified location.

        Args:
            lat: Latitude (WGS84)
            lon: Longitude (WGS84)
        """
        # Create a small extent around the point
        point = QgsPointXY(lon, lat)

        # Get canvas CRS
        canvas_crs = self.iface.mapCanvas().mapSettings().destinationCrs()

        # Transform point to canvas CRS if needed
        if canvas_crs.authid() != "EPSG:4326":
            transform = QgsCoordinateTransform(
                self.wgs84,
                canvas_crs,
                QgsProject.instance()
            )
            point = transform.transform(point)

        # Create extent (about 500m radius in map units)
        extent_size = 500  # meters
        if canvas_crs.isGeographic():
            # For geographic CRS, use degrees (rough approximation)
            extent_size = 0.005  # about 500m at this latitude

        extent = QgsRectangle(
            point.x() - extent_size,
            point.y() - extent_size,
            point.x() + extent_size,
            point.y() + extent_size
        )

        # Set map extent and refresh
        self.iface.mapCanvas().setExtent(extent)
        self.iface.mapCanvas().refresh()

    def _on_measure_distance_requested(self):
        """Handle Measure Distance & Bearing button click."""
        self.iface.mapCanvas().setMapTool(self.measure_tool)
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Click two points on the map to measure distance and bearing",
            level=0,  # Info
            duration=5
        )

    def _on_line_tool_requested(self):
        """Handle Line Tool button click."""
        self.tool_registry.activate_tool('line')
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Click to add points. Right-click or ESC to finish line.",
            level=0,  # Info
            duration=5
        )

    def _on_range_rings_tool_requested(self):
        """Handle Range Rings Tool button click."""
        self.tool_registry.activate_tool('range_rings')
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            "Range Rings Tool: Click center point to configure rings",
            level=0,  # Info
            duration=5
        )

    def _on_line_complete(self, feature_data):
        """
        Handle line drawing completion.

        Args:
            feature_data: Dict with line info (name, distance_m, points, etc.)
        """
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            f"Line '{feature_data['name']}' added ({feature_data['points']} points, {feature_data['distance_m']:.0f}m)",
            level=3,  # Success
            duration=3
        )
        # Deactivate tool
        self.tool_registry.deactivate_current()

    def _on_range_rings_complete(self, feature_data):
        """
        Handle range rings drawing completion.

        Args:
            feature_data: Dict with ring info (count, mode, center, etc.)
        """
        mode_str = "LPB-based" if feature_data['mode'] == 'lpb' else "Manual"
        self.iface.messageBar().pushMessage(
            "SAR Tracker",
            f"{mode_str} range rings created ({feature_data['count']} rings)",
            level=3,  # Success
            duration=3
        )
        # Deactivate tool
        self.tool_registry.deactivate_current()

    def _on_drawing_cancelled(self):
        """Handle drawing cancellation (ESC pressed)."""
        # Silent cancellation - no message needed
        pass

    def _on_tool_activated(self, tool_name):
        """
        Update UI when drawing tool activated.

        Args:
            tool_name: Name of activated tool
        """
        if hasattr(self, 'sar_panel') and self.sar_panel:
            self.sar_panel.set_active_tool(tool_name.title())

    def _on_tool_deactivated(self, tool_name):
        """
        Update UI when drawing tool deactivated.

        Args:
            tool_name: Name of deactivated tool
        """
        if hasattr(self, 'sar_panel') and self.sar_panel:
            self.sar_panel.set_active_tool("None")

    def _on_measurement_complete(self, distance_m, distance_km, bearing, point1, point2):
        """
        Handle measurement completion.

        Args:
            distance_m: Distance in meters
            distance_km: Distance in kilometers
            bearing: Bearing in degrees (0-360, where 0 = North)
            point1: First point
            point2: Second point
        """
        # Format distance nicely
        if distance_m < 1000:
            distance_str = f"{distance_m:.1f} meters"
        else:
            distance_str = f"{distance_km:.2f} km"

        # Format bearing with cardinal direction
        cardinal = self._bearing_to_cardinal(bearing)

        # Show results on single line for better visibility
        message = f"<b>Distance:</b> {distance_str}  •  <b>Bearing:</b> {bearing:.1f}° ({cardinal})"

        # Use message bar with longer duration
        self.iface.messageBar().pushMessage(
            "Measurement Result",
            message,
            level=3,  # Success (green)
            duration=10
        )

        # Deactivate tool (return to pan/zoom)
        self.iface.mapCanvas().unsetMapTool(self.measure_tool)

    def _bearing_to_cardinal(self, bearing):
        """
        Convert bearing to cardinal direction.

        Args:
            bearing: Bearing in degrees (0-360)

        Returns:
            str: Cardinal direction (N, NE, E, SE, S, SW, W, NW)
        """
        directions = ["N", "NE", "E", "SE", "S", "SW", "W", "NW"]
        index = int((bearing + 22.5) / 45) % 8
        return directions[index]

    def _on_autosave_requested(self):
        """Handle auto-save request from SAR Panel."""
        try:
            # Save the current QGIS project
            project = QgsProject.instance()

            # Check if project has a file path
            if project.fileName():
                # Project already has a file, save it
                success = project.write()

                if success:
                    self.sar_panel.update_autosave_status(True)
                    self.iface.messageBar().pushMessage(
                        "SAR Tracker",
                        "Project saved successfully",
                        level=3,  # Success
                        duration=2
                    )
                else:
                    self.sar_panel.update_autosave_status(False)
                    self.iface.messageBar().pushMessage(
                        "SAR Tracker",
                        "Failed to save project",
                        level=2,  # Warning
                        duration=3
                    )
            else:
                # Project hasn't been saved yet - prompt for location
                file_path, _ = QFileDialog.getSaveFileName(
                    self.iface.mainWindow(),
                    "Save QGIS Project",
                    "",
                    "QGIS Project Files (*.qgz *.qgs)"
                )

                if file_path:
                    success = project.write(file_path)

                    if success:
                        self.sar_panel.update_autosave_status(True)
                        self.iface.messageBar().pushMessage(
                            "SAR Tracker",
                            f"Project saved to {file_path}",
                            level=3,  # Success
                            duration=3
                        )
                    else:
                        self.sar_panel.update_autosave_status(False)
                else:
                    # User cancelled - don't mark as failed
                    pass

        except Exception as e:
            self.sar_panel.update_autosave_status(False)
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Auto-Save Error",
                f"Error saving project:\n\n{str(e)}"
            )

    def _check_for_paused_mission(self):
        """Check if there's a paused mission and prompt user to resume."""
        saved_state = self.sar_panel.load_mission_state()

        if saved_state:
            # Show resume dialog
            dialog = QDialog(self.iface.mainWindow())
            dialog.setWindowTitle("Resume Mission?")
            dialog.setModal(True)

            layout = QVBoxLayout()

            # Message
            message = QLabel(
                f"<b>Found paused mission:</b><br><br>"
                f"Mission: {saved_state['name']}<br>"
                f"Started: {saved_state['start_time'][:19]}<br><br>"
                f"Do you want to resume this mission?"
            )
            message.setWordWrap(True)
            layout.addWidget(message)

            # Buttons
            button_layout = QHBoxLayout()

            resume_button = QPushButton("Resume Mission")
            resume_button.setDefault(True)
            resume_button.clicked.connect(dialog.accept)
            button_layout.addWidget(resume_button)

            cancel_button = QPushButton("Start Fresh")
            cancel_button.clicked.connect(dialog.reject)
            button_layout.addWidget(cancel_button)

            layout.addLayout(button_layout)
            dialog.setLayout(layout)

            # Show dialog and handle result
            result = dialog.exec_()

            if result == QDialog.Accepted:
                # Resume the mission
                self.sar_panel.restore_mission_state(saved_state)
                self.sar_panel.show()  # Show panel
                self.iface.messageBar().pushMessage(
                    "SAR Tracker",
                    f"Mission '{saved_state['name']}' resumed",
                    level=3,  # Success
                    duration=3
                )
            else:
                # User chose to start fresh - clear saved state
                settings = QSettings()
                settings.remove("SAR_Tracker/mission_paused")
                settings.remove("SAR_Tracker/mission_name")
                settings.remove("SAR_Tracker/mission_start_time")
